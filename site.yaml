---
- name: check the switch version
  hosts: switches
  gather_facts: yes
  vars:
    ansible_user: admin
    ops_debug: no
    cli:
      username: "{{ ops_username }}"
      password: "{{ ops_password }}"
      host: "{{ ansible_host }}"
      port: "{{ ansible_port }}"
    expected: OpenSwitch
  tasks:
    - name: show version CLI
      ops_command:
        commands:
          - show version
        provider: "{{ cli }}"
        waitfor:
          - "result[0] contains {{ expected }}"
        interval: 1
        retries: 2
      register: result
      connection: local
    - name: debug the result
      debug: var=result
      when: ops_debug

- name: basic L2/L3 for fabric switches
  hosts: fabrics
  gather_facts: no
  vars:
    ansible_user: admin
    ops_debug: no
  roles:
    - role: switch
      ops_intf_admin_state: up

- name: basic L2/L3 for spine switches
  hosts: spines
  gather_facts: no
  vars:
    ansible_user: admin
    ops_debug: no
  roles:
    - role: switch
      ops_intf_admin_state: up

- name: basic L2/L3 for leaf switches
  hosts: leaves
  gather_facts: no
  vars:
    ansible_user: admin
    ops_debug: no
  roles:
    - role: switch
      ops_intf_admin_state: up

- name: BGP for fabric switches
  hosts: fabrics
  gather_facts: no
  vars:
    ansible_user: admin
    ops_debug: no
  roles:
    - role: bgp

- name: BGP for spine switches
  hosts: spines
  gather_facts: no
  vars:
    ansible_user: admin
    ops_debug: no
  roles:
    - role: bgp

- name: BGP for leaf switches
  hosts: leaves
  gather_facts: no
  vars:
    ansible_user: admin
    ops_debug: no
  roles:
    - role: bgp

- name: verify the switch configuration
  hosts: switches
  gather_facts: no
  vars:
    ansible_user: admin
    ops_debug: no
    cli:
      username: "{{ ops_username }}"
      password: "{{ ops_password }}"
      host: "{{ ansible_host }}"
      port: "{{ ansible_port }}"
  tasks:
    - name: show running-config
      ops_command:
        commands:
          - show running-config
        provider: "{{ cli }}"
        waitfor:
          - "result[0] contains 'hostname {{ ops_system_hostname }}'"
        interval: 1
        retries: 2
      register: result
      connection: local
    - name: print out the result
      debug: var=result

- name: wait for BGP peering up
  hosts: switches
  gather_facts: no
  tasks:
    - pause: seconds=60

- name: verify BGP peering
  hosts: switches
  gather_facts: no
  vars:
    ansible_user: admin
    ops_debug: no
    cli:
      username: "{{ ops_username }}"
      password: "{{ ops_password }}"
      host: "{{ ansible_host }}"
      port: "{{ ansible_port }}"
  tasks:
    - name: show ip bgp neighbors
      ops_command:
        commands:
          - show ip bgp neighbors
        provider: "{{ cli }}"
        waitfor:
          - "result[0] contains 'state: Established'"
        interval: 1
        retries: 2
      register: result
      connection: local
    - name: print out the result
      debug: var=result

- name: verify IP routing table (RIB)
  hosts: switches
  gather_facts: yes
  vars:
    ansible_user: admin
    ops_debug: no
    cli:
      username: "{{ ops_username }}"
      password: "{{ ops_password }}"
      host: "{{ ansible_host }}"
      port: "{{ ansible_port }}"
  tasks:
    - name: show ip route
      ops_command:
        commands:
          - show ip route
        provider: "{{ cli }}"
        interval: 1
        retries: 2
      register: result
      connection: local
    - name: print out the result
      debug: var=result
